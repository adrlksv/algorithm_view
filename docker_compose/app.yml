version: '3.9'

services:
  db:
    image: postgres:17
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: crypto_key_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 30
    networks:
      - alg_network
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  backend:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: main-app
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=crypto_key_db
      - DB_PORT=5432
    env_file:
      - ../.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - alg_network
    command: uvicorn --factory app.api.main:create_app --host 0.0.0.0 --port 8000
    volumes:
      - ../.env:/app/.env
      - ../alembic.ini:/app/alembic.ini
      - ../migrations:/app/migrations

  frontend:
    build:
      context: ..
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: frontend-app
    ports:
      - "5173:5173"
    volumes:
      - ../frontend:/app/frontend
      - /app/frontend/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - alg_network
    command: npm run dev

networks:
  alg_network:
    driver: bridge

volumes:
  pgdata: